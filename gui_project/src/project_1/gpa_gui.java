package project_1;

import javax.swing.*;
import javax.swing.table.*;
import java.text.*;

/*------------------------------------------------------------------------------
 * TODO : [redacted]
 * ? TODO : refactoring all input validation and op to functions in another class
 * ? TODO : refactoring input vals to incl. loops
 * 
 * // TODO : work on implementing end-game GPAs and CGPA
 * // TODO : more testing on cgpa
 * 
 * // TODO : more testing on Add new subject
 * // TODO : more testing on Remove Subject
 * // TODO : rework GPA calculation
 * 
 * // TODO : rework subject mark-grade input val , exception
 * // TODO : rework credit hour's combo box?
 * // TODO : rename temp vars...
 * 
 * You can do this.
 * -----------------------------------------------------------------------------
*/

/**
 * This class is to ask user for each semester's details
 * and calculates GPA.
 * 
 * @author [redacted]
 * @version [redacted]
 * @since [redacted]
 */
public class gpa_gui extends javax.swing.JFrame {

    /**
     * Creates new form gpa_gui.
     **/
    public gpa_gui() {
        initComponents();
    }
    
    // object init
    sem sem1 = new sem();
    cgpa_gui cg1 = new cgpa_gui();
    DecimalFormat df = new DecimalFormat("0.00");
    
    // data members below for determining sems' op
    public int sem_no = 0;
    public int count_sem = 0;
    
    // data members below for recording sems' details
    private String subject_code = " ";
    private String subject_name = " ";
    private int subject_mark = 0;
    private String grade = " ";
    private int credit_hour[] = new int[10];
    private final double user_grade_point[] = new double [10];
    
    private double gpa = 0;
    private double cgpa = 0;
    
    // data members below for determining flow of ops
    private int count_subject = 0;
    private boolean error = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        semLabel = new javax.swing.JLabel();
        programLabel = new javax.swing.JLabel();
        subject_codeLabel = new javax.swing.JLabel();
        subject_codeTF = new javax.swing.JTextField();
        subject_nameLabel = new javax.swing.JLabel();
        subject_nameTF = new javax.swing.JTextField();
        subject_markLabel = new javax.swing.JLabel();
        subject_markTF = new javax.swing.JTextField();
        gradeLabel = new javax.swing.JLabel();
        gradeTF = new javax.swing.JTextField();
        credit_hoursLabel = new javax.swing.JLabel();
        creditHoursCombo = new javax.swing.JComboBox<>();
        clearButton = new java.awt.Button();
        AddNewSubjButton = new java.awt.Button();
        RemoveSubjButton = new java.awt.Button();
        subjTableScrollPane = new javax.swing.JScrollPane();
        subjTable = new javax.swing.JTable();
        gpaLabel = new javax.swing.JLabel();
        gpaTF = new javax.swing.JTextField();
        totalCreditHoursLabel = new javax.swing.JLabel();
        totalCreditHoursTF = new javax.swing.JTextField();
        nextButton = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GPA and CGPA calculator");
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(600, 300));
        setMinimumSize(new java.awt.Dimension(825, 485));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        semLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        semLabel.setText("Semester  :  ");
        getContentPane().add(semLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, 30));

        programLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        programLabel.setText("Program  :  ");
        getContentPane().add(programLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 30));

        subject_codeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subject_codeLabel.setText("Subject Code");
        getContentPane().add(subject_codeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 110, -1));

        subject_codeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subject_codeTFActionPerformed(evt);
            }
        });
        getContentPane().add(subject_codeTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 110, -1));

        subject_nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subject_nameLabel.setText("Subject Name");
        getContentPane().add(subject_nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 93, -1));

        subject_nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subject_nameTFActionPerformed(evt);
            }
        });
        getContentPane().add(subject_nameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 110, -1));

        subject_markLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subject_markLabel.setText("Subject Mark");
        getContentPane().add(subject_markLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 110, -1));

        subject_markTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subject_markTFActionPerformed(evt);
            }
        });
        getContentPane().add(subject_markTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 110, -1));

        gradeLabel.setText("Grade");
        getContentPane().add(gradeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 120, -1, -1));

        gradeTF.setEditable(false);
        getContentPane().add(gradeTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, 110, -1));

        credit_hoursLabel.setText("Credit Hours");
        getContentPane().add(credit_hoursLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 120, -1, -1));

        creditHoursCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        getContentPane().add(creditHoursCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, 107, -1));

        clearButton.setBackground(new java.awt.Color(255, 0, 0));
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setLabel("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 210, 115, -1));

        AddNewSubjButton.setBackground(new java.awt.Color(0, 255, 51));
        AddNewSubjButton.setLabel("Add New Subject");
        AddNewSubjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewSubjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(AddNewSubjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 140, 115, 20));

        RemoveSubjButton.setBackground(new java.awt.Color(255, 255, 0));
        RemoveSubjButton.setLabel("Remove Subject");
        RemoveSubjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSubjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RemoveSubjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 170, 115, -1));

        subjTable.setAutoCreateRowSorter(true);
        subjTable.setBackground(new java.awt.Color(214, 217, 223));
        subjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Subject Code", "Subject Name", "Subject Mark", "Grade", "Credit Hours"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subjTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        subjTable.setFillsViewportHeight(true);
        subjTable.setFocusable(false);
        subjTable.setGridColor(new java.awt.Color(0, 0, 0));
        subjTable.setShowGrid(true);
        subjTable.getTableHeader().setReorderingAllowed(false);
        subjTableScrollPane.setViewportView(subjTable);
        if (subjTable.getColumnModel().getColumnCount() > 0) {
            subjTable.getColumnModel().getColumn(0).setResizable(false);
            subjTable.getColumnModel().getColumn(0).setPreferredWidth(5);
            subjTable.getColumnModel().getColumn(1).setResizable(false);
            subjTable.getColumnModel().getColumn(2).setResizable(false);
            subjTable.getColumnModel().getColumn(3).setResizable(false);
            subjTable.getColumnModel().getColumn(4).setResizable(false);
            subjTable.getColumnModel().getColumn(5).setResizable(false);
        }

        getContentPane().add(subjTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 618, 188));

        gpaLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        gpaLabel.setText("GPA   :   ");
        gpaLabel.setPreferredSize(new java.awt.Dimension(32, 16));
        getContentPane().add(gpaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 91, 33));

        gpaTF.setEditable(false);
        getContentPane().add(gpaTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 99, 33));

        totalCreditHoursLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        totalCreditHoursLabel.setText("Total credit hours   :   ");
        totalCreditHoursLabel.setPreferredSize(new java.awt.Dimension(32, 16));
        getContentPane().add(totalCreditHoursLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 240, 33));

        totalCreditHoursTF.setEditable(false);
        getContentPane().add(totalCreditHoursTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 390, 99, 33));

        nextButton.setBackground(new java.awt.Color(0, 0, 204));
        nextButton.setForeground(new java.awt.Color(255, 255, 255));
        nextButton.setLabel("NEXT");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 390, 110, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function is run when user enters on subject_codeTF
     * 
     * @param evt enter button
     */
    private void subject_codeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subject_codeTFActionPerformed
        if (evt.getSource()==subject_codeTF)
        {
            // subject_code for get text from subject_codeTF
            subject_code = subject_codeTF.getText();
            
            // if subject_code is not as format "abcd123"
            if (subject_code.length() != 7)
            {
                // error msg. notifying users
                subject_codeTF.setText("");
                JOptionPane.showMessageDialog(
                        null,
                        "Inputted subject code's format is wrong!",
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_subject_codeTFActionPerformed

    /**
     * This function is run when user click clearButton
     * 
     * @param evt on click
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        if (evt.getSource()==clearButton)
        {
            // asking users for confirmation before op
            int confirm = JOptionPane.showConfirmDialog(
                        null,
                        "Are you sure you to clear the subject table?",
                        "Conformation",
                        JOptionPane.YES_NO_OPTION);
            
            // if yes - reset everything to 0 ; else do nothing
            if (confirm == 0)
            {
                subject_codeTF.setText("");
                subject_markTF.setText("");
                subject_nameTF.setText("");
                gradeTF.setText("");
                creditHoursCombo.setSelectedIndex(0);

                gpa = 0;
                sem1.totalCreditHours = 0;
                
                gpaTF.setText("");
                totalCreditHoursTF.setText("");

                // getModel from jTable1
                DefaultTableModel model = (DefaultTableModel) subjTable.getModel();
                model.setRowCount(0);
                count_subject = 0;
            }
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * This function is run when user enters on subject_markTF
     * 
     * @param evt enter button
     */
    private void subject_markTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subject_markTFActionPerformed
        if (evt.getSource()==subject_markTF)
        {
            // try ... catch for except. hand.
            try
            {
                error = false;
                // Begin exception cause
                    // subject_mark for get text from tField and convert to int
                subject_mark = Integer.parseInt(subject_markTF.getText());
                // End exception cause

                // if subject_mark is out of range
                if (subject_mark > 100 || subject_mark < 0)
                {
                    // set to error if out of range
                    error = true;
                    // error msg. notifying users
                    JOptionPane.showMessageDialog(
                            null,
                            "Inputted subject mark is out of range!",
                            "Error!", JOptionPane.ERROR_MESSAGE);

                    // reset TF to 0
                    subject_markTF.setText("");
                    gradeTF.setText("");
                }
            }
            catch (NumberFormatException a_error)
            {
                // subject_code is set to error if catch a_error
                error = true;

                // if input before catch is not empty
                if (subject_markTF.getText().length() != 0)
                {
                    // error msg. notifying users
                    JOptionPane.showMessageDialog(
                            null,
                            "Inputted subject mark is wrong!",
                            "Error!", JOptionPane.ERROR_MESSAGE);
                }

                // reset TF to 0
                subject_markTF.setText("");
                gradeTF.setText("");
            }

            // if no exception & error
            if (error == false)
            {
                // subject_mark is passed to class , process and return to grade
                grade = sem1.grade_calc(subject_mark);
                // pass string of grade to gradeTF
                gradeTF.setText(grade);
            }
        }
    }//GEN-LAST:event_subject_markTFActionPerformed

    /**
     * This function is run when user click AddNewSubjButton
     * 
     * @param evt on click
     */
    private void AddNewSubjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewSubjButtonActionPerformed
        if (evt.getSource()==AddNewSubjButton)
        {
            // subject count validation ; not more than 10 subj.
            if(count_subject < 10)
            {
                // input validation on all possible inputs
                if
                (subject_codeTF.getText().length() == 7 &&
                subject_nameTF.getText().length() != 0 &&
                subject_markTF.getText().length() != 0 &&
                gradeTF.getText().length() != 0 &&
                creditHoursCombo.getSelectedIndex() != 0)
                {
                    // get value from list index to credit_hour[count]
                    credit_hour[count_subject] = creditHoursCombo.getSelectedIndex();
                    // pass credit_hour[count] to add
                    sem1.credit_hour_calc_add(credit_hour, count_subject);

                    // user_grade_point stored in [count], from user_grade_point_calc
                    user_grade_point[count_subject] = sem1.user_grade_point_calc(gradeTF.getText());
                    // pass credit hour[count] and user_grade_point[count] to calc_gpa_add and return to gpa_main
                    gpa = sem1.calc_gpa_add(credit_hour, count_subject, user_grade_point);

                    // set text on totalCreditHoursTF
                    totalCreditHoursTF.setText(Integer.toString(sem1.totalCreditHours));
                    // set text on gpaTF, with decimalformat gpa_main
                    gpaTF.setText(df.format(gpa));

                    count_subject++;

                    // getModel from subjTable
                    DefaultTableModel model = (DefaultTableModel) subjTable.getModel();

                    // add inputted row to table
                    model.addRow(new Object[]{
                        count_subject,
                        subject_codeTF.getText(),
                        subject_nameTF.getText(),
                        subject_markTF.getText(),
                        gradeTF.getText(),
                        creditHoursCombo.getSelectedIndex()
                    });

                    // reset TF and combo to 0
                    subject_codeTF.setText("");
                    subject_markTF.setText("");
                    subject_nameTF.setText("");
                    gradeTF.setText("");
                    creditHoursCombo.setSelectedIndex(0);

                    // info msg. notifying user
                    JOptionPane.showMessageDialog(
                                null,
                                "You have successfully entered a subject.",
                                "Information", JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    // error msg. notifying user
                    JOptionPane.showMessageDialog(
                                null,
                                "Insufficient inputs!\nPlease check again!",
                                "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                // warning msg. notifying user
                JOptionPane.showMessageDialog(
                            null,
                            "Max no. of subjects in table!",
                            "Warning!", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_AddNewSubjButtonActionPerformed

    /**
     * This function is run when user enters on subject_nameTF
     * 
     * @param evt enter button
     */
    private void subject_nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subject_nameTFActionPerformed
        if(evt.getSource()==subject_nameTF)
        {
            // input validation - empty input
            if (subject_nameTF.getText().length() == 0)
            {
                // reset TF and error msg.
                subject_nameTF.setText("");
                JOptionPane.showMessageDialog(
                            null,
                            "Inputted subject name is empty!",
                            "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_subject_nameTFActionPerformed

    /**
     * This function is run when user click RemoveSubjButton
     * 
     * @param evt on click
     */
    private void RemoveSubjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSubjButtonActionPerformed
        if(evt.getSource()==RemoveSubjButton)
        {
            int confirm = JOptionPane.showConfirmDialog(
                        null,
                        "Are you sure you want to remove previous subject?",
                        "Confirmation",
                        JOptionPane.YES_NO_OPTION);
                    
            // if yes - delete previous subj. else do nothing
            if (confirm == 0)
            {
                // if count is not 0 to prevent exception
                if(count_subject != 0)
                {
                    --count_subject;

                    // minus previous credit hour
                    sem1.credit_hour_calc_min(credit_hour, count_subject);
                    // set TF to current updated val
                    totalCreditHoursTF.setText(Integer.toString(sem1.totalCreditHours));

                    //user_grade_point = sem1.user_grade_point_calc(gradeTF.getText());
                    gpa = sem1.calc_gpa_min(credit_hour, count_subject, user_grade_point);
                    gpaTF.setText(df.format(gpa));

                    // getModel from jTable1
                    DefaultTableModel model = (DefaultTableModel) subjTable.getModel();

                    // remove row from table
                    model.removeRow(count_subject);
                }
                else
                    // warning msg. notifying users
                    JOptionPane.showMessageDialog(
                                null,
                                "Cannot delete more subjects!",
                                "Warning!", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_RemoveSubjButtonActionPerformed

    /**
     * This function is run when user click nextButton
     * 
     * @param evt on click
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if(evt.getSource()==nextButton)
        {
            // asking users for confirm. msg
            int confirm = JOptionPane.showConfirmDialog(
                        null,
                        "Are you sure the subjects inputted are correct?",
                        "Confirmation",
                        JOptionPane.YES_NO_OPTION);
            
            // getModel from subjTable and gpaTable
            DefaultTableModel model = (DefaultTableModel) subjTable.getModel();
            DefaultTableModel gpa_model = (DefaultTableModel) cg1.gpaTable.getModel();
                
            // if yes and subjTable not empty, reset all TF and table to 0, cont. next sem;
            // else do nothing 
            if (confirm == 0 && model.getRowCount()!=0)
            {
                count_sem += 1;
                
                // calc for totalCGPACreditHours and totalCGPACreditPoints
                sem1.totalCGPACreditHours += sem1.totalCreditHours;
                sem1.totalCGPACreditPoints += sem1.totalCreditPoints;
                
                // add GPA to gpaTable
                gpa_model.addRow(new Object[]{
                    (count_sem-1),
                    gpaTF.getText()
                });
                
                // if count_sem is less than total no. of sem;
                // else - finished , go to cgpa menu
                if(count_sem <= sem_no)
                {
                    // update semLabel with current no. of sem
                    // reset all TF and table to 0
                    semLabel.setText("Semester  :  " + count_sem);
                    subject_codeTF.setText("");
                    subject_markTF.setText("");
                    subject_nameTF.setText("");
                    gradeTF.setText("");
                    creditHoursCombo.setSelectedIndex(0);
                    gpaTF.setText("");
                    totalCreditHoursTF.setText("");

                    gpa = 0;
                    sem1.totalCreditPoints = 0;
                    sem1.totalCreditHours = 0;

                    model.setRowCount(0);
                    count_subject = 0;
                }
                else
                {
                    // delete current frame instance
                    dispose();
                    
                    // create new cgpa_gui instance
                    java.awt.EventQueue.invokeLater(() -> {
                        cg1.setVisible(true);
                        
                        cgpa = sem1.calc_cgpa(sem1.totalCGPACreditPoints, sem1.totalCGPACreditHours);
                        
                        // set cgpaTF and totalCreditHoursFinalTF with vals from this class
                        cg1.cgpaTF.setText(df.format(cgpa));
                        cg1.totalCreditHoursFinalTF.setText(Integer.toString(sem1.totalCGPACreditHours));
                    });
                }
            }
            else if (confirm == 0 && model.getRowCount()==0)
            {
                // error msg. notifying users
                JOptionPane.showMessageDialog(
                            null,
                            "Subject Table is empty!",
                            "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button AddNewSubjButton;
    private java.awt.Button RemoveSubjButton;
    private java.awt.Button clearButton;
    private javax.swing.JComboBox<String> creditHoursCombo;
    private javax.swing.JLabel credit_hoursLabel;
    private javax.swing.JLabel gpaLabel;
    private javax.swing.JTextField gpaTF;
    private javax.swing.JLabel gradeLabel;
    private javax.swing.JTextField gradeTF;
    private java.awt.Button nextButton;
    public javax.swing.JLabel programLabel;
    public javax.swing.JLabel semLabel;
    private javax.swing.JTable subjTable;
    private javax.swing.JScrollPane subjTableScrollPane;
    private javax.swing.JLabel subject_codeLabel;
    private javax.swing.JTextField subject_codeTF;
    private javax.swing.JLabel subject_markLabel;
    private javax.swing.JTextField subject_markTF;
    private javax.swing.JLabel subject_nameLabel;
    private javax.swing.JTextField subject_nameTF;
    private javax.swing.JLabel totalCreditHoursLabel;
    private javax.swing.JTextField totalCreditHoursTF;
    // End of variables declaration//GEN-END:variables
}